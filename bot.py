from flask import Flask, Request, jsonify
from datetime import datetime
from telebot import types
import logging.config
import telebot, sys
import os, re
import time

from keyboard import *
from actions import *
from configs import *
from text import *
from db import *

import actions

logging.config.fileConfig(log_ini_file, disable_existing_loggers=False)
logger = logging.getLogger(__name__)

server = Flask(__name__)			# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask —Å–µ—Ä–≤–µ—Ä–∞
bot = telebot.TeleBot(bot_token)	# —Ç–æ–∂ —Å–∞–º–æ–µ —Ç–æ–ª—å–∫–æ —Å –º–æ–¥—É–ª–µ–º –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞

bot.remove_webhook()				# —É–¥–∞–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤–µ–±—Ö—É–∫
logger.info("delete webhook")
time.sleep(2)
									# —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ –Ω–∞—à –ò–ü –∞–¥—Ä–µ—Å —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
bot.set_webhook(url="https://{host}:{port}".format(host=bot_ip, port=bot_port), certificate=open(cert, 'r'), allowed_updates=["message", "callback_query"])
logger.info("set webhook %s" % bot_ip)

kbrs = {
	"eat":catalog_eat(),
	"dress":catalog_dress()
}

# —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —Å—É—Ç–∏
# –≤ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–∏—Ö–æ–¥—è—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
# –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
# –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ POST
@server.route("/", methods=['POST'])
def getMessage():
	r = request.get_json()										# –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å json
	logger.info(r)
	print(r)
	if r == None:
		return "ok", 200

	if "callback_query" in r.keys():							# –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å callback_query
		chat_id = r["callback_query"]["from"]["id"]				# —Ç–æ –Ω—É–∂–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å chat_id
		data = r["callback_query"]["data"]						# —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		message_id = r["callback_query"]["id"]					# –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
		username = '0'
		if "username" in r["callback_query"]["from"]:			# username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			username = r["callback_query"]["from"]["username"]

		if data == "back_to_main":
			bot.send_message(chat_id=chat_id, text=text_MAIN_MENU.format(username=username), parse_mode='HTML', reply_markup=main_keyboard())
			return "ok", 200
		if data == "back_to_catalog":
			bot.send_message(chat_id=chat_id, text=text_CATALOG.format(username=username), parse_mode='HTML', reply_markup=catalog())
			return "ok", 200
		if "catalog_" in data:
			add = data.split("_")
			item_tag = add[-1]
			img_shop = open("/root/src/python/shop_bot/images/{tag}.jpg".format(tag=item_tag), "rb")
			bot.send_photo(chat_id=chat_id, photo=img_shop, reply_markup=kbrs[item_tag])
			return "ok", 200
		if data == "go_to_cart":
			bot.send_message(chat_id=chat_id, text=user_cart(chat_id), parse_mode='HTML', reply_markup=cart())
			return "ok", 200

		if "get_" in data:
			# return "ok", 200
			add = data.split("_")
			item_tag = add[1]
			item_price = add[-1]
			img_shop = open("/root/src/python/shop_bot/images/{tag}.jpg".format(tag=item_tag), "rb")
			bot.send_photo(chat_id=chat_id, photo=img_shop, reply_markup=item_add(item_tag, item_price))
			return "ok", 200
		if "add_" in data:
			# return "ok", 200
			add = data.split("_")
			item_tag = add[1]
			item_price = add[-1]
			add_item = addItem(user=str(chat_id), item=item_tag, price=item_price)
			if add_item is False:
				bot.answer_callback_query(callback_query_id=message_id, text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
				return "ok", 200
			bot.answer_callback_query(callback_query_id=message_id, text='–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É')
			return "ok", 200
		if "del_" in data:
			# return "ok", 200
			add = data.split("_")
			item_tag = add[1]
			item_price = add[-1]
			del_item = delItem(user=str(chat_id), item=item_tag, price=item_price)
			if del_item is False:
				bot.answer_callback_query(callback_query_id=message_id, text='–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
				return "ok", 200
			bot.answer_callback_query(callback_query_id=message_id, text='–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
			return "ok", 200

	if "message" in r.keys():
		chat_id = r["message"]["chat"]["id"]									# –µ—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–ª–µ—Ç–µ–ª Json —Å message
		username = 'shop user'
		if "first_name" in r["message"]["chat"]:								# —Ç–∞–∫ –∂–µ –¥–æ—Å—Ç–∞–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			first_name = replace_symbols(r["message"]["chat"]["first_name"])
		if "username" in r["message"]["chat"]:
			username = replace_symbols(r["message"]["chat"]["username"])
		if "last_name" in r["message"]["chat"]:
			last_name = replace_symbols(r["message"]["chat"]["last_name"])
		if "text" in r["message"]:
			text_mess = r["message"]["text"]
		else:
			bot.send_message(chat_id=chat_id, text="–ö–∞–∫–∞—è —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞", parse_mode='HTML', reply_markup=main_keyboard())
			return "ok", 200

		# –µ—Å–ª–∏ –±–æ—Ç—É –ø—Ä–∏–ª–µ—Ç–µ–ª –∑–∞–ø—Ä–æ—Å /start 
		if text_mess == '/start':
			bot.send_message(chat_id=chat_id, text=text_START.format(username=username), parse_mode='HTML', reply_markup=main_keyboard())
			return "ok", 200

		if text_mess == 'üí∞ –ö–∞—Ç–∞–ª–æ–≥':
			bot.send_message(chat_id=chat_id, text=text_CATALOG.format(username=username), parse_mode='HTML', reply_markup=catalog())
			return "ok", 200

		if text_mess == 'üéì –ö–æ—Ä–∑–∏–Ω–∞':
			bot.send_message(chat_id=chat_id, text=user_cart(chat_id), parse_mode='HTML', reply_markup=cart())
			return "ok", 200

		if text_mess == 'ü§ñ –ö–æ–Ω—Ç–∞–∫—Ç—ã':
			bot.send_message(chat_id=chat_id, text=text_CONTACT, parse_mode='HTML', reply_markup=main_keyboard())
			return "ok", 200

	return "ok", 200

def user_cart(user):
	user_items = getItem(str(user))
	if user_items == False:
		text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
	else:
		text = "–í –í–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n"
		text += "<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {price}</b>\n\n".format(price=user_items["all_price"])
		del user_items["all_price"]
		for item in user_items:
			text += "{item} {count}—à—Ç".format(item=item, count=user_items[item]["count"])
	return text

# —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–æ—Ç—É
def replace_symbols(text):
	update_text = re.sub(r'\W*', '', text)
	return update_text

if __name__ == "__main__":
	server.run(host=bot_ip, port=int(os.environ.get('PORT', bot_port)), ssl_context=(cert, cert_key))
